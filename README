APEX Interpreter

Andrew Couch
August 2011

Intro
Dependencies
Files
Supported Functionality
Future Steps

Intro
  Just dive into it!  fire up: 'ruby console.rb' and start typing Apex.
  Stick to statements that use Integer, String, and Boolean types (for now).

Dependencies
-Ruby (probably 1.8.something)
-Gem (for Treetop)
-Treetop (1.4.9)

Files
- apex.treetop
    The grammar file defining the Apex language in Treetop rule definitions.
    Maps Treetop's SyntaxNodes to specific types of Apex nodes.

- nodes.rb
    The definition of the Apex syntax node types.
    Provides methods to retrive the various semantic parts of the node.
    Relevant nodes provide a #value function that recursively evaluates the
      node in the scope provided.

- types.rb
    Definitions of the basic Apex types, which many expressions evaluate to.

- system.rb
    Definition of the Scope class.

- parser.rb
    Parser class that handles cleanup of the code.  The node definitions
      assume the parse tree has been cleaned by this class.

- test.rb
    Some unit tests of various parts of the grammar.  INCOMPLETE.

- console.rb
    Rudimentary statement-based console.

Supported Functionality
- Syntax
-- Integer, String, and Boolean literals
-- Ternary operator
-- Logical and and or operators, with shortcut execution
-- Equals and not equals (all classes) and inequality operators (for integers)
-- Addition, subtraction, multiplication, and division for integers
-- Negation of integers and inversion of booleans
-- Parenthesized expressions
-- Assignment

- Features
-- Strict typing
-- Nested scoping (revert on error)

- Interface
-- Multiline statement input
-- Expression value output
-- Syntax tree display on error

Future Steps
- Floats, other primitives
- Complete primitive API
- Classes and objects
- Standard SObject library


